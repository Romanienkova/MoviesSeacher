{"version":3,"file":"static/js/441.3c72c823.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/Section/Section.styled.js","components/Container/Container.styled.js","pages/Movies/MoviesPage.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledMoviesList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 24px;\n`;\n","import styled from 'styled-components';\n\nexport const StyledSection = styled.section`\n  padding-top: 40px;\n  padding-bottom: 40px;\n\n  @media screen and (min-width: 1280px) {\n    padding-top: 60px;\n    padding-bottom: 60px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const StyledContainer = styled.div`\n  max-width: 320px;\n  margin: 0 auto;\n  padding: 0 15px;\n\n  @media screen and (min-width: 768px) {\n    max-width: 768px;\n    padding: 0 32px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    max-width: 1280px;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport toast, { Toaster } from 'react-hot-toast';\n\nimport { fetchSearchMovie } from 'services/api';\nimport { Loader, MovieCard, SearchForm } from 'components/index';\n\nimport { StyledSection } from 'components/Section/Section.styled';\nimport { StyledContainer } from 'components/Container/Container.styled';\nimport { StyledMoviesList } from 'components/MoviesList/MoviesList.styled';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query') ?? '';\n\n  const location = useLocation();\n\n  useEffect(() => {\n    if (searchQuery === null || searchQuery === '') return;\n\n    async function getMovieByQuery(searchQuery) {\n      try {\n        setIsLoading(true);\n\n        const moviesByQuery = await fetchSearchMovie(searchQuery);\n\n        if (!moviesByQuery.length) {\n          setError(`No movies found, please try another query.`);\n          setMovies([]);\n          return;\n        }\n        toast.success(`Found ${moviesByQuery.length} movies!`);\n        setMovies(moviesByQuery);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovieByQuery(searchQuery);\n  }, [searchQuery]);\n\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n      setError(null);\n    }\n  }, [error]);\n\n  const onSubmit = searchValue => {\n    setSearchParams({ query: searchValue });\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      <StyledSection style={{ paddingBottom: '0' }}>\n        <StyledContainer>\n          <SearchForm searchQuery={searchQuery} onSubmit={onSubmit} />\n        </StyledContainer>\n      </StyledSection>\n\n      <StyledSection>\n        {!isLoading && !error && !movies.length && (\n          <p\n            style={{\n              textAlign: 'center',\n            }}\n          >\n            Sorry, there are no movies...\n          </p>\n        )}\n\n        {Boolean(movies.length) && (\n          <StyledMoviesList>\n            {movies.map(movie => {\n              return (\n                <MovieCard location={location} {...movie} key={movie.id} />\n              );\n            })}\n          </StyledMoviesList>\n        )}\n      </StyledSection>\n\n      <Toaster/>\n    </>\n  );\n};\n\nexport default MoviesPage;\n","// import axios from 'axios';\n// import defaultPoster from 'images/default.jpg';\n\n// const API_KEY = '0de3e6e1ea62d4b6eb2e230ef210ae93';\n// const BASE_URL_POSTER = 'https://image.tmdb.org/t/p/w300';\n\n// axios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// export const fetchTrendingMovies = async () => {\n//   const params = {\n//     api_key: API_KEY,\n//   };\n\n//   const { data } = await axios.get('trending/movie/day', {\n//     params,\n//   });\n\n//   const results = data.results.map(({ id, title, poster_path }) => ({\n//     id,\n//     title,\n//     poster_path: getPosterPath(poster_path),\n//   }));\n\n//   return results;\n// };\n\n// export const fetchSearchMovies = async query => {\n//   const params = {\n//     api_key: API_KEY,\n//     query,\n// \t};\n\t\n//   const { data } = await axios.get(\n//     'search/movie', {params}\n\n// \t);\n\t\n// \tconst results = data.results.map(({ id, title, poster_path }) => ({\n// \t\tid,\n// \t\ttitle,\n// \t\tposter_path: getPosterPath(poster_path),\n\t\t\n// \t}));\n\n//   return results;\n\n// };\n\n// export const fetchMovieDetails = async movieId => {\n//   const params = {\n//     api_key: API_KEY,\n//   };\n\n//   const { data } = await axios.get(`movie/${movieId}`, {\n//     params,\n//   });\n\n//   const {\n//     poster_path,\n//     title,\n//     tagline,\n//     adult,\n//     release_date,\n//     vote_average,\n//     overview,\n//     genres,\n//     production_countries,\n//   } = data;\n\n//   return {\n//     poster_path: getPosterPath(poster_path),\n//     title,\n//     tagline,\n//     adult,\n//     release_date: new Date(release_date).getFullYear(),\n//     vote_average: vote_average.toFixed(1),\n//     overview,\n//     genres: genres.map(genre => genre.name).join(', '),\n//     production_countries: production_countries\n//       .map(country => country.name)\n//       .join(', '),\n//   };\n// };\n\n// export const getMovieCredits = async movieId => {\n//   const params = {\n//     api_key: API_KEY,\n//   };\n\n//   const { data } = await axios.get(`movie/${movieId}/credits`, { params });\n\n//   const cast = data.cast.map(({ profile_path, character, name }) => ({\n//     profile_path: getPosterPath(profile_path),\n//     character,\n//     name,\n//   }));\n\n//   return cast;\n// };\n\n// export const fetchMovieReviews = async movieId => {\n//   const params = {\n//     api_key: API_KEY,\n//   };\n\n//   const { data } = await axios.get(`movie/${movieId}/reviews`, { params });\n\n//   const reviews = data.results.map(({ author, content }) => ({\n//     author,\n//     content,\n//   }));\n\n//   return reviews;\n// };\n\n// const getPosterPath = file_path => {\n//   return file_path ? `${BASE_URL_POSTER}${file_path}` : defaultPoster;\n// };\n\n\nimport axios from 'axios';\nimport defaultPoster from 'images/default.jpg';\n\nconst API_KEY = '0de3e6e1ea62d4b6eb2e230ef210ae93';\nconst BASE_URL_POSTER = 'https://image.tmdb.org/t/p/original';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n export const fetchTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get('trending/movie/day', {\n    params,\n  });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getPosterPath(poster_path),\n  }));\n\n  return results;\n};\n\nexport const fetchSearchMovie = async query => {\n  const params = {\n    api_key: API_KEY,\n    query,\n  };\n\n  const { data } = await axios.get('search/movie', { params });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getPosterPath(poster_path),\n  }));\n\n  return results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}`, {\n    params,\n  });\n\n  const {\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    production_countries,\n  } = data;\n\n  return {\n    poster_path: getPosterPath(poster_path),\n    title,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    production_countries: production_countries\n      .map(country => country.name)\n      .join(', '),\n  };\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}/credits`, { params });\n\n  const cast = data.cast.map(({ profile_path, character, name }) => ({\n    profile_path: getPosterPath(profile_path),\n    character,\n    name,\n  }));\n\n  return cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}/reviews`, { params });\n\n  const reviews = data.results.map(({ author, content }) => ({\n    author,\n    content,\n  }));\n\n  return reviews;\n};\n\nconst getPosterPath = file_path => {\n  return file_path ? `${BASE_URL_POSTER}${file_path}` : defaultPoster;\n};\n"],"names":["StyledMoviesList","styled","StyledSection","StyledContainer","useState","movies","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","searchQuery","get","location","useLocation","useEffect","fetchSearchMovie","moviesByQuery","length","toast","message","getMovieByQuery","style","paddingBottom","onSubmit","searchValue","query","textAlign","Boolean","map","movie","key","id","API_KEY","axios","fetchTrending","params","api_key","data","results","title","poster_path","getPosterPath","fetchMovieDetails","movieId","release_date","vote_average","overview","genres","production_countries","Date","getFullYear","toFixed","genre","name","join","country","fetchMovieCredits","cast","profile_path","character","fetchMovieReviews","reviews","author","content","file_path","defaultPoster"],"sourceRoot":""}