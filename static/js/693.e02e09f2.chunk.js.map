{"version":3,"file":"static/js/693.e02e09f2.chunk.js","mappings":"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","sources":["pages/Reviews/Reviews.styled.js","pages/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 0 40px;\n\n  .review__card {\n    padding: 15px;\n    border: 6px solid ${props => props.theme.colors.greenDark};\n    border-radius: 10px;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchMovieReviews } from 'services/api';\nimport { Loader } from 'components/index';\n\nimport { StyledReviewsList } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    (async function () {\n      try {\n        setIsLoading(true);\n\n        const movieReviews = await fetchMovieReviews(movieId);\n\n        setMovieReviews(movieReviews);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      {!error && !movieReviews.length && (\n        <p style={{ textAlign: 'center' }}>No reviews yet</p>\n      )}\n\n      {Boolean(movieReviews.length) && (\n        <StyledReviewsList>\n          {movieReviews.map(review => {\n            const { author, content } = review;\n            return (\n              <li key={author} className=\"review__card\">\n                <p style={{marginBottom: 8}}>\n                  <b>Author:</b> {author}\n                </p>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </StyledReviewsList>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport defaultPoster from 'images/default.jpg';\n\nconst API_KEY = '0de3e6e1ea62d4b6eb2e230ef210ae93';\nconst BASE_URL_POSTER = 'https://image.tmdb.org/t/p/original';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n export const fetchTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get('trending/movie/day', {\n    params,\n  });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getPosterPath(poster_path),\n  }));\n\n  return results;\n};\n\nexport const fetchSearchMovie = async query => {\n  const params = {\n    api_key: API_KEY,\n    query,\n  };\n\n  const { data } = await axios.get('search/movie', { params });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getPosterPath(poster_path),\n  }));\n\n  return results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}`, {\n    params,\n  });\n\n  const {\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    production_countries,\n  } = data;\n\n  return {\n    poster_path: getPosterPath(poster_path),\n    title,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    production_countries: production_countries\n      .map(country => country.name)\n      .join(', '),\n  };\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}/credits`, { params });\n\n  const cast = data.cast.map(({ profile_path, character, name }) => ({\n    profile_path: getPosterPath(profile_path),\n    character,\n    name,\n  }));\n\n  return cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}/reviews`, { params });\n\n  const reviews = data.results.map(({ author, content }) => ({\n    author,\n    content,\n  }));\n\n  return reviews;\n};\n\nconst getPosterPath = file_path => {\n  return file_path ? `${BASE_URL_POSTER}${file_path}` : defaultPoster;\n};\n"],"names":["StyledReviewsList","styled","props","theme","colors","greenDark","useState","movieReviews","setMovieReviews","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchMovieReviews","message","length","style","textAlign","Boolean","map","review","author","content","className","marginBottom","API_KEY","axios","fetchTrending","params","api_key","data","results","id","title","poster_path","getPosterPath","fetchSearchMovie","query","fetchMovieDetails","release_date","vote_average","overview","genres","production_countries","Date","getFullYear","toFixed","genre","name","join","country","fetchMovieCredits","cast","profile_path","character","reviews","file_path","defaultPoster"],"sourceRoot":""}