{"version":3,"file":"static/js/114.a71f8bea.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/Section/Section.styled.js","pages/Home/HomePage.styled.js","pages/Home/HomePage.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledMoviesList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 24px;\n`;\n","import styled from 'styled-components';\n\nexport const StyledSection = styled.section`\n  padding-top: 40px;\n  padding-bottom: 40px;\n\n  @media screen and (min-width: 1280px) {\n    padding-top: 60px;\n    padding-bottom: 60px;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const StyledMainTitle = styled.h1`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 40px;\n  color: ${props => props.theme.colors.greenDark};\n  font-size: 42px;\n`;\n","import { useEffect, useState } from 'react';\n\nimport { fetchTrending } from 'services/api';\nimport { Loader, MovieCard } from 'components/index';\n\nimport { StyledSection } from 'components/Section/Section.styled';\nimport { StyledMoviesList } from 'components/MoviesList/MoviesList.styled';\nimport { StyledMainTitle } from './HomePage.styled';\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    (async function () {\n      try {\n        setIsLoading(true);\n\n        const trendMovies = await fetchTrending();\n\n        setMovies(trendMovies);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      <StyledSection>\n        <StyledMainTitle>Trending today</StyledMainTitle>\n\n        {!error && Boolean(movies.length) && (\n          <StyledMoviesList>\n            {Boolean(movies.length > 0) &&\n              movies.map(movie => {\n                return <MovieCard {...movie} key={movie.id} />;\n              })}\n          </StyledMoviesList>\n        )}\n      </StyledSection>\n    </>\n  );\n};\n\nexport default HomePage;\n\n","import axios from 'axios';\nimport defaultPoster from 'images/default.jpg';\n\nconst API_KEY = '0de3e6e1ea62d4b6eb2e230ef210ae93';\nconst BASE_URL_POSTER = 'https://image.tmdb.org/t/p/original';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n export const fetchTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get('trending/movie/day', {\n    params,\n  });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getPosterPath(poster_path),\n  }));\n\n  return results;\n};\n\nexport const fetchSearchMovie = async query => {\n  const params = {\n    api_key: API_KEY,\n    query,\n  };\n\n  const { data } = await axios.get('search/movie', { params });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getPosterPath(poster_path),\n  }));\n\n  return results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}`, {\n    params,\n  });\n\n  const {\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    production_countries,\n  } = data;\n\n  return {\n    poster_path: getPosterPath(poster_path),\n    title,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    production_countries: production_countries\n      .map(country => country.name)\n      .join(', '),\n  };\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}/credits`, { params });\n\n  const cast = data.cast.map(({ profile_path, character, name }) => ({\n    profile_path: getPosterPath(profile_path),\n    character,\n    name,\n  }));\n\n  return cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}/reviews`, { params });\n\n  const reviews = data.results.map(({ author, content }) => ({\n    author,\n    content,\n  }));\n\n  return reviews;\n};\n\nconst getPosterPath = file_path => {\n  return file_path ? `${BASE_URL_POSTER}${file_path}` : defaultPoster;\n};\n"],"names":["StyledMoviesList","styled","StyledSection","StyledMainTitle","props","theme","colors","greenDark","useState","movies","setMovies","isLoading","setIsLoading","error","setError","useEffect","fetchTrending","trendMovies","message","Boolean","length","map","movie","key","id","API_KEY","axios","params","api_key","data","results","title","poster_path","getPosterPath","fetchSearchMovie","query","fetchMovieDetails","movieId","release_date","vote_average","overview","genres","production_countries","Date","getFullYear","toFixed","genre","name","join","country","fetchMovieCredits","cast","profile_path","character","fetchMovieReviews","reviews","author","content","file_path","defaultPoster"],"sourceRoot":""}