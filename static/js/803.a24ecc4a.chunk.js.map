{"version":3,"file":"static/js/803.a24ecc4a.chunk.js","mappings":"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","sources":["components/Section/Section.styled.js","pages/MovieDetails/MovieDetailsPage.styled.js","components/LinkInfo/LinkInfo.styled.js","pages/MovieDetails/MovieDetailsPage.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledSection = styled.section`\n  padding-top: 40px;\n  padding-bottom: 40px;\n\n  @media screen and (min-width: 1280px) {\n    padding-top: 60px;\n    padding-bottom: 60px;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const StyledMovieDetailsContainer = styled.div`\n  display: flex;\n\n  gap: 30px;\n  margin-top: 40px;\n\n  .movie__details--poster {\n    height: 100%;\n    object-fit: cover;\n\t border-radius: 8px;\n\n  }\n\n  .movie__content {\n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n\t margin-bottom: 12px;\n\n  }\n\n  .movie__title {\n    display: flex;\n    align-items: start;\n    justify-content: space-between;\n    gap: 20px;\n    color: ${props => props.theme.colors.greenDark};\n  }\n\n  .movie__rating {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: ${props => props.theme.colors.orangeDark};\n    border-radius: 6px;\n    padding: 6px 12px;\n    width: 100px;\n    color: ${props => props.theme.colors.greenDark};\n    font-size: 18px;\n    font-weight: 700;\n  }\n`;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const StyledLinkInfo = styled(Link)`\ndisplay: flex;\n\n  padding: 8px;\n  color: ${props => props.theme.colors.greenDark};\n  text-decoration: none;\n  font-weight: 600;\n\n  border: 2px solid ${props => props.theme.colors.greenLight};\n  border-radius: 6px;\n  transition: background-color ${props => props.theme.animation.cubicBezier},\n    color ${props => props.theme.animation.cubicBezier};\n\n  :hover,\n  :focus{\n    color: ${props => props.theme.colors.orangeLight};\n    background-color: ${props => props.theme.colors.greenLight};\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport {RiArrowGoBackFill} from 'react-icons/ri';\n\nimport { fetchMovieDetails } from 'services/api';\nimport { Loader } from 'components/index';\n\nimport { StyledMovieDetailsContainer } from './MovieDetailsPage.styled';\nimport { StyledSection } from 'components/Section/Section.styled';\nimport { StyledLinkInfo } from 'components/LinkInfo/LinkInfo.styled';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const [movieDetails, setMovieDetails] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    (async function () {\n      try {\n        setIsLoading(true);\n\n        const movieDetails = await fetchMovieDetails(movieId);\n\n        setMovieDetails(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error) {\n      alert(error);\n    }\n  }, [error]);\n\n  const isCastVisible = location.pathname.includes('cast');\n  const isReviewsVisible = location.pathname.includes('reviews');\n\n  const {\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    production_countries,\n  } = movieDetails;\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      <StyledSection style={{ paddingBottom: '0' }}>\n        <div style={{ paddingLeft: 40, paddingRight: 40 }}>\n          <StyledLinkInfo\n            to={location.state?.from ?? '/'}\n            style={{ width: 104 }}\n          >\n            <RiArrowGoBackFill size={20} />&nbsp;Go back\n          </StyledLinkInfo>\n\n          <StyledMovieDetailsContainer>\n            <img\n              className=\"movie__details--poster\"\n              alt={'Poster of \"' + title + '\"'}\n              src={poster_path}\n              loading=\"lazy\"\n              width={220}\n            />\n            <div className=\"movie__content\">\n              <div className=\"movie__title\">\n                <h1>\n                  {title} [{release_date}]\n                </h1>\n              </div>\n              <div className=\"movie__rating\">{vote_average}</div>\n              <p>\n                <b>Overview: </b>\n                {overview}\n              </p>\n              <p>\n                <b>Genres: </b>\n                {genres}\n              </p>\n              <p>\n                <b>Countries: </b>\n                {production_countries}\n              </p>\n            </div>\n          </StyledMovieDetailsContainer>\n\n          <nav\n            style={{ display: 'flex', justifyContent: 'center', gap: '30px' }}\n          >\n            <StyledLinkInfo\n              state={{ from: location.state?.from ?? '/' }}\n              to={isCastVisible ? '' : 'cast'}\n            >\n              {isCastVisible ? 'Hide Cast' : 'Show Cast'}\n            </StyledLinkInfo>\n\n            <StyledLinkInfo\n              state={{ from: location.state?.from ?? '/' }}\n              to={isReviewsVisible ? '' : 'reviews'}\n            >\n              {isReviewsVisible ? 'Hide Reviews' : 'Show Reviews'}\n            </StyledLinkInfo>\n          </nav>\n        </div>\n      </StyledSection>\n\n      <StyledSection>\n        <Outlet />\n\n        {/* <Routes>\n            <Route path=\"cast\" element={<Cast />} />\n            <Route path=\"reviews\" element={<Reviews />} />\n          </Routes>\n\n          (without Layout) */}\n      </StyledSection>\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\nimport defaultPoster from 'images/default.jpg';\n\nconst API_KEY = '0de3e6e1ea62d4b6eb2e230ef210ae93';\nconst BASE_URL_POSTER = 'https://image.tmdb.org/t/p/original';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n export const fetchTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get('trending/movie/day', {\n    params,\n  });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getPosterPath(poster_path),\n  }));\n\n  return results;\n};\n\nexport const fetchSearchMovie = async query => {\n  const params = {\n    api_key: API_KEY,\n    query,\n  };\n\n  const { data } = await axios.get('search/movie', { params });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getPosterPath(poster_path),\n  }));\n\n  return results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}`, {\n    params,\n  });\n\n  const {\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    production_countries,\n  } = data;\n\n  return {\n    poster_path: getPosterPath(poster_path),\n    title,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    production_countries: production_countries\n      .map(country => country.name)\n      .join(', '),\n  };\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}/credits`, { params });\n\n  const cast = data.cast.map(({ profile_path, character, name }) => ({\n    profile_path: getPosterPath(profile_path),\n    character,\n    name,\n  }));\n\n  return cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}/reviews`, { params });\n\n  const reviews = data.results.map(({ author, content }) => ({\n    author,\n    content,\n  }));\n\n  return reviews;\n};\n\nconst getPosterPath = file_path => {\n  return file_path ? `${BASE_URL_POSTER}${file_path}` : defaultPoster;\n};\n"],"names":["StyledSection","styled","StyledMovieDetailsContainer","props","theme","colors","greenDark","orangeDark","StyledLinkInfo","Link","greenLight","animation","cubicBezier","orangeLight","movieId","useParams","location","useLocation","useState","movieDetails","setMovieDetails","isLoading","setIsLoading","error","setError","useEffect","fetchMovieDetails","message","alert","isCastVisible","pathname","includes","isReviewsVisible","poster_path","title","release_date","vote_average","overview","genres","production_countries","style","paddingBottom","paddingLeft","paddingRight","to","state","from","width","size","className","alt","src","loading","display","justifyContent","gap","API_KEY","axios","fetchTrending","params","api_key","data","results","map","id","getPosterPath","fetchSearchMovie","query","Date","getFullYear","toFixed","genre","name","join","country","fetchMovieCredits","cast","profile_path","character","fetchMovieReviews","reviews","author","content","file_path","defaultPoster"],"sourceRoot":""}