{"version":3,"file":"static/js/328.9f7cd927.chunk.js","mappings":"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","sources":["pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledCastList = styled.ul`\n  padding: 0 40px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n\n  .cast__card {\n    width: 120px;\n    height: auto;\n\t border-radius: 6px;\nborder: 1px solid ${props => props.theme.colors.greenLight};\n\n  }\n\n  .cast__poster {\n    width: 100%;\n    height: 160px;\n    object-fit: cover;\n    border-radius: 6px 6px 0 0;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchMovieCredits } from 'services/api';\nimport { Loader } from 'components/index';\n\nimport { StyledCastList } from './Cast.styled';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getCast() {\n      try {\n        setIsLoading(true);\n\n        const movieCast = await fetchMovieCredits(movieId);\n\n        setMovieCast(movieCast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n\t  }\n\t  getCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      {!error && !movieCast.length && (\n        <p style={{ textAlign: 'center' }}>No information yet</p>\n      )}\n\n      {Boolean(movieCast.length) && (\n        <StyledCastList>\n          {movieCast.map(actor => {\n            const { profile_path, character, name, id } = actor;\n            return (\n              <li className=\"cast__card\" key={id}>\n                <img\n                  className=\"cast__poster\"\n                  src={profile_path}\n                  alt={name}\n                  loading=\"lazy\"\n                />\n                <div style={{ fontSize: 14, margin: 4 }}>\n                  <p>\n                    <b>Character:</b> {character}\n                  </p>\n                  <p>\n                    <b>Name:</b> {name}\n                  </p>\n                </div>\n              </li>\n            );\n          })}\n        </StyledCastList>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport defaultPoster from 'images/default.jpg';\n\nconst API_KEY = '0de3e6e1ea62d4b6eb2e230ef210ae93';\nconst BASE_URL_POSTER = 'https://image.tmdb.org/t/p/original';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n export const fetchTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get('trending/movie/day', {\n    params,\n  });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getPosterPath(poster_path),\n  }));\n\n  return results;\n};\n\nexport const fetchSearchMovie = async query => {\n  const params = {\n    api_key: API_KEY,\n    query,\n  };\n\n  const { data } = await axios.get('search/movie', { params });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getPosterPath(poster_path),\n  }));\n\n  return results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}`, {\n    params,\n  });\n\n  const {\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    production_countries,\n  } = data;\n\n  return {\n    poster_path: getPosterPath(poster_path),\n    title,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    production_countries: production_countries\n      .map(country => country.name)\n      .join(', '),\n  };\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}/credits`, { params });\n\n  const cast = data.cast.map(({ profile_path, character, name }) => ({\n    profile_path: getPosterPath(profile_path),\n    character,\n    name,\n  }));\n\n  return cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`movie/${movieId}/reviews`, { params });\n\n  const reviews = data.results.map(({ author, content }) => ({\n    author,\n    content,\n  }));\n\n  return reviews;\n};\n\nconst getPosterPath = file_path => {\n  return file_path ? `${BASE_URL_POSTER}${file_path}` : defaultPoster;\n};\n"],"names":["StyledCastList","styled","props","theme","colors","greenLight","useState","movieCast","setMovieCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchMovieCredits","message","getCast","length","style","textAlign","Boolean","map","actor","profile_path","character","name","id","className","src","alt","loading","fontSize","margin","API_KEY","axios","fetchTrending","params","api_key","data","results","title","poster_path","getPosterPath","fetchSearchMovie","query","fetchMovieDetails","release_date","vote_average","overview","genres","production_countries","Date","getFullYear","toFixed","genre","join","country","cast","fetchMovieReviews","reviews","author","content","file_path","defaultPoster"],"sourceRoot":""}